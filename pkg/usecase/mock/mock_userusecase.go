// Code generated by MockGen. DO NOT EDIT.
// Source: /home/lenovo/Downloads/MaxPump/pkg/usecase/interfaces/userInterface.go

// Package mock is a generated GoMock package.
package mock

import (
	entity "MAXPUMP1/pkg/domain/entity"
	model "MAXPUMP1/pkg/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserUsecaseInterface is a mock of UserUsecaseInterface interface.
type MockUserUsecaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserUsecaseInterfaceMockRecorder
}

// MockUserUsecaseInterfaceMockRecorder is the mock recorder for MockUserUsecaseInterface.
type MockUserUsecaseInterfaceMockRecorder struct {
	mock *MockUserUsecaseInterface
}

// NewMockUserUsecaseInterface creates a new mock instance.
func NewMockUserUsecaseInterface(ctrl *gomock.Controller) *MockUserUsecaseInterface {
	mock := &MockUserUsecaseInterface{ctrl: ctrl}
	mock.recorder = &MockUserUsecaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUsecaseInterface) EXPECT() *MockUserUsecaseInterfaceMockRecorder {
	return m.recorder
}

// ExecuteCreateInvoice mocks base method.
func (m *MockUserUsecaseInterface) ExecuteCreateInvoice(userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteCreateInvoice", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteCreateInvoice indicates an expected call of ExecuteCreateInvoice.
func (mr *MockUserUsecaseInterfaceMockRecorder) ExecuteCreateInvoice(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteCreateInvoice", reflect.TypeOf((*MockUserUsecaseInterface)(nil).ExecuteCreateInvoice), userID)
}

// ExecuteLoginWithPassword mocks base method.
func (m *MockUserUsecaseInterface) ExecuteLoginWithPassword(phone, password string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteLoginWithPassword", phone, password)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteLoginWithPassword indicates an expected call of ExecuteLoginWithPassword.
func (mr *MockUserUsecaseInterfaceMockRecorder) ExecuteLoginWithPassword(phone, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteLoginWithPassword", reflect.TypeOf((*MockUserUsecaseInterface)(nil).ExecuteLoginWithPassword), phone, password)
}

// ExecuteSignup mocks base method.
func (m *MockUserUsecaseInterface) ExecuteSignup(use entity.User) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteSignup", use)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteSignup indicates an expected call of ExecuteSignup.
func (mr *MockUserUsecaseInterfaceMockRecorder) ExecuteSignup(use interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteSignup", reflect.TypeOf((*MockUserUsecaseInterface)(nil).ExecuteSignup), use)
}

// ExecuteSignupOtpValidation mocks base method.
func (m *MockUserUsecaseInterface) ExecuteSignupOtpValidation(key, otp string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteSignupOtpValidation", key, otp)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteSignupOtpValidation indicates an expected call of ExecuteSignupOtpValidation.
func (mr *MockUserUsecaseInterfaceMockRecorder) ExecuteSignupOtpValidation(key, otp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteSignupOtpValidation", reflect.TypeOf((*MockUserUsecaseInterface)(nil).ExecuteSignupOtpValidation), key, otp)
}

// ExecuteSignupWithOtp mocks base method.
func (m *MockUserUsecaseInterface) ExecuteSignupWithOtp(user model.Signup) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteSignupWithOtp", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteSignupWithOtp indicates an expected call of ExecuteSignupWithOtp.
func (mr *MockUserUsecaseInterfaceMockRecorder) ExecuteSignupWithOtp(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteSignupWithOtp", reflect.TypeOf((*MockUserUsecaseInterface)(nil).ExecuteSignupWithOtp), user)
}

// ExecuteWallet mocks base method.
func (m *MockUserUsecaseInterface) ExecuteWallet(userID int) (*entity.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteWallet", userID)
	ret0, _ := ret[0].(*entity.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteWallet indicates an expected call of ExecuteWallet.
func (mr *MockUserUsecaseInterfaceMockRecorder) ExecuteWallet(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteWallet", reflect.TypeOf((*MockUserUsecaseInterface)(nil).ExecuteWallet), userID)
}

// FetchProfile mocks base method.
func (m *MockUserUsecaseInterface) FetchProfile(userID int) (*entity.User, []entity.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchProfile", userID)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].([]entity.Address)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchProfile indicates an expected call of FetchProfile.
func (mr *MockUserUsecaseInterfaceMockRecorder) FetchProfile(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchProfile", reflect.TypeOf((*MockUserUsecaseInterface)(nil).FetchProfile), userID)
}
