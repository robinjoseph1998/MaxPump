// Code generated by MockGen. DO NOT EDIT.
// Source: /home/lenovo/Downloads/MaxPump/pkg/repository/interfaces/userInterface.go

// Package mockRepo is a generated GoMock package.
package mockRepo

import (
	entity "MAXPUMP1/pkg/domain/entity"
	model "MAXPUMP1/pkg/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserInterface is a mock of UserInterface interface.
type MockUserInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserInterfaceMockRecorder
}

// MockUserInterfaceMockRecorder is the mock recorder for MockUserInterface.
type MockUserInterfaceMockRecorder struct {
	mock *MockUserInterface
}

// NewMockUserInterface creates a new mock instance.
func NewMockUserInterface(ctrl *gomock.Controller) *MockUserInterface {
	mock := &MockUserInterface{ctrl: ctrl}
	mock.recorder = &MockUserInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserInterface) EXPECT() *MockUserInterfaceMockRecorder {
	return m.recorder
}

// CheckPermission mocks base method.
func (m *MockUserInterface) CheckPermission(user *entity.User) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPermission", user)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPermission indicates an expected call of CheckPermission.
func (mr *MockUserInterfaceMockRecorder) CheckPermission(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPermission", reflect.TypeOf((*MockUserInterface)(nil).CheckPermission), user)
}

// Create mocks base method.
func (m *MockUserInterface) Create(user *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserInterfaceMockRecorder) Create(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserInterface)(nil).Create), user)
}

// CreateOtpKey mocks base method.
func (m *MockUserInterface) CreateOtpKey(otpKey *entity.OtpKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOtpKey", otpKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOtpKey indicates an expected call of CreateOtpKey.
func (mr *MockUserInterfaceMockRecorder) CreateOtpKey(otpKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOtpKey", reflect.TypeOf((*MockUserInterface)(nil).CreateOtpKey), otpKey)
}

// CreateSignup mocks base method.
func (m *MockUserInterface) CreateSignup(user *model.Signup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSignup", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSignup indicates an expected call of CreateSignup.
func (mr *MockUserInterfaceMockRecorder) CreateSignup(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSignup", reflect.TypeOf((*MockUserInterface)(nil).CreateSignup), user)
}

// Delete mocks base method.
func (m *MockUserInterface) Delete(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserInterfaceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserInterface)(nil).Delete), id)
}

// GetAddressByOrder mocks base method.
func (m *MockUserInterface) GetAddressByOrder(AddressId int) (*entity.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressByOrder", AddressId)
	ret0, _ := ret[0].(*entity.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressByOrder indicates an expected call of GetAddressByOrder.
func (mr *MockUserInterfaceMockRecorder) GetAddressByOrder(AddressId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressByOrder", reflect.TypeOf((*MockUserInterface)(nil).GetAddressByOrder), AddressId)
}

// GetAddressesByUserID mocks base method.
func (m *MockUserInterface) GetAddressesByUserID(userID int) ([]entity.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressesByUserID", userID)
	ret0, _ := ret[0].([]entity.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressesByUserID indicates an expected call of GetAddressesByUserID.
func (mr *MockUserInterfaceMockRecorder) GetAddressesByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressesByUserID", reflect.TypeOf((*MockUserInterface)(nil).GetAddressesByUserID), userID)
}

// GetByEmail mocks base method.
func (m *MockUserInterface) GetByEmail(email string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", email)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockUserInterfaceMockRecorder) GetByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUserInterface)(nil).GetByEmail), email)
}

// GetByID mocks base method.
func (m *MockUserInterface) GetByID(id int) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserInterfaceMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserInterface)(nil).GetByID), id)
}

// GetByKey mocks base method.
func (m *MockUserInterface) GetByKey(key string) (*entity.OtpKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByKey", key)
	ret0, _ := ret[0].(*entity.OtpKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByKey indicates an expected call of GetByKey.
func (mr *MockUserInterfaceMockRecorder) GetByKey(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByKey", reflect.TypeOf((*MockUserInterface)(nil).GetByKey), key)
}

// GetByPhone mocks base method.
func (m *MockUserInterface) GetByPhone(Phone string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPhone", Phone)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPhone indicates an expected call of GetByPhone.
func (mr *MockUserInterfaceMockRecorder) GetByPhone(Phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPhone", reflect.TypeOf((*MockUserInterface)(nil).GetByPhone), Phone)
}

// GetMyWallet mocks base method.
func (m *MockUserInterface) GetMyWallet(userID int) (*entity.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMyWallet", userID)
	ret0, _ := ret[0].(*entity.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMyWallet indicates an expected call of GetMyWallet.
func (mr *MockUserInterfaceMockRecorder) GetMyWallet(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMyWallet", reflect.TypeOf((*MockUserInterface)(nil).GetMyWallet), userID)
}

// GetOrdersByUserID mocks base method.
func (m *MockUserInterface) GetOrdersByUserID(userID int) (*entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByUserID", userID)
	ret0, _ := ret[0].(*entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByUserID indicates an expected call of GetOrdersByUserID.
func (mr *MockUserInterfaceMockRecorder) GetOrdersByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByUserID", reflect.TypeOf((*MockUserInterface)(nil).GetOrdersByUserID), userID)
}

// GetSignupByPhone mocks base method.
func (m *MockUserInterface) GetSignupByPhone(phone string) (*model.Signup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignupByPhone", phone)
	ret0, _ := ret[0].(*model.Signup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignupByPhone indicates an expected call of GetSignupByPhone.
func (mr *MockUserInterfaceMockRecorder) GetSignupByPhone(phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignupByPhone", reflect.TypeOf((*MockUserInterface)(nil).GetSignupByPhone), phone)
}

// IsBlocked mocks base method.
func (m *MockUserInterface) IsBlocked(phone string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBlocked", phone)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsBlocked indicates an expected call of IsBlocked.
func (mr *MockUserInterfaceMockRecorder) IsBlocked(phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBlocked", reflect.TypeOf((*MockUserInterface)(nil).IsBlocked), phone)
}

// Update mocks base method.
func (m *MockUserInterface) Update(user *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserInterfaceMockRecorder) Update(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserInterface)(nil).Update), user)
}
